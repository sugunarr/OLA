<html>
<head>
<title>ADODB Manual</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>
  
<body bgcolor="#FFFFFF">

<h1>ADODB Library for PHP4</h1>
<p>V0.95 13 Mar 2001 (c) 2000-2001 John Lim (jlim@natsoft.com.my)</p>
<p>Released under <a href="http://www.gnu.org/copyleft/lesser.html">GNU Lesser 
 GPL library license</a>. This means you can use it in proprietary and commercial products.</p>
<p><a href="#intro"><b>Introduction</b></a><b><br>
 <a href="#features">Unique Features</a><br>
 <a href="#changes">Change Log</a></b><b><br>
 <a href="#bugs">Feature Requests and Bug Reports</a><br>
 </b><b><a href="#install">Installation<br>
 </a><a href="#coding">Initialization Code</a></b> <a href=#ADOLoadCode><font size="2">ADOLoadCode</font></a> 
 <font size="2"><a href=#adonewconnection>ADONewConnection</a></font><br>
 <b> <a href="#quickstart">Tutorial</a></b><br>
 <a href="#ex1">Example 1: Select</a><br>
 <a href="#ex2">Example 2: Advanced Select</a><br>
 <a href="#ex3">Example 3: Insert</a><br>
 <a href="#ex4">Example 4: Debugging</a> &nbsp;<a href="#exrs2html">rs2html example</a><br>
 <a href="#ex5">Example 5: MySQL and Menus</a><br>
 <a href="#ex6">Example 6: Connecting to Multiple Databases at once</a> </p>
<p><a href="#ref"><b>Reference</b></a><br>
  <a href="#ADOConnection"><b>ADOConnection</b></a>: <a href="#connect"><font size="2">Connect</font></a> 
  <font size="2"><a href="#pconnect">PConnect</a> <a href="#execute">Execute</a> <a href="#SelectLimit">SelectLimit</a>
  <a href="#Close">Close</a> <a href="#concat">Concat</a> <a href="#dbdate">DBDate</a> 
  <a href="#dbtimestamp">DBTimeStamp</a> <a href="#qstr">qstr</a> <a href="#begintrans">BeginTrans</a> 
  <a href="#committrans">CommitTrans</a> <a href="#rollbacktrans">RollbackTrans</a></font> 
  <font size="2"><a href="#affected_rows">Affected_Rows</a> <a href="#inserted_id">Insert_ID</a></font> 
  <font size="2"><a href="#errormsg">ErrorMsg</a> <a href="#errorno">ErrorNo</a> 
  <a href="#metadatabases">MetaDatabases</a> <a href="#metatables">MetaTables 
  </a><a href="#blankrecordset">BlankRecordSet</a> <a href="#metacolumns">MetaColumns</a></font> 
  <br>
  <a href="#ADORecordSet"><b>ADORecordSet</b></a>: <a href="#getassoc"><font size="2">GetAssoc</font></a> 
  <font size="2"><a href="#getarray">GetArray</a> <a href="#getrows">GetRows</a> <a href="#getmenu">GetMenu</a> 
  <a href="#userdate">UserDate</a> <a href="#usertimestamp">UserTimeStamp</a> 
  <a href="#unixdate">UnixDate</a> <a href="#unixtimestamp">UnixTimeStamp</a> 
  <a href="#move">Move</a> <a href="#movenext">MoveNext</a> <a href="#movefirst">MoveFirst</a> 
  <a href="#movelast">MoveLast</a> <a href="#fields">Fields</a> <a href="#fetchfield">FetchField</a> 
  <a href="#currentrow">CurrentRow</a> <a href="#abspos">AbsolutePosition</a> 
  <a href="#fieldcount">FieldCount</a> <a href="#recordcount">RecordCount</a> 
  <a href="#rsclose">Close</a> <a href="#metatype">MetaType</a></font> <br>
  <a href="#rs2html"><b>rs2html</b></a>&nbsp; <a href="#exrs2html">example</a><br>
  <a href="#adodiff">Differences between ADODB and ADO</a><br>
  <a href="#driverguide"><b>Database Driver Guide<br>
  </b></a> </p>
<h2>Introduction<a name="intro"></a></h2>
<p>PHP's database access functions are not standardised. This creates a need for 
 a database class library to hide the differences between the different databases 
 (encapsulate the differences) so we can easily switch databases.</p>
<p>We currently support MySQL, Interbase, Oracle, Microsoft SQL Server, Sybase, 
  PostgreSQL, Foxpro, Access, ADO and ODBC. We hope more people 
  will contribute drivers to support other databases.</p>
<p>PHP4 supports session variables. You can store your session information using 
  ADODB for true portability and scalability. See adodb-session.php for more information.</p>
<h2>Unique Features of ADODB<a name="features"></a></h2>
<ul>
  <li><b>Easy for Windows programmers</b> to adapt to because many of the conventions 
    are similar to Microsoft's ADO.</li>
  <li>Unlike other PHP database classes which focus only on select statements, 
    <b>we provide support code to handle inserts and updates which can be adapted 
    to multiple databases quickly.</b> Methods are provided for date handling, 
    string concatenation and string quoting characters for differing databases.</li>
  <li>A<b> metatype system </b>is built in so that we can figure out that types 
    such as CHAR, TEXT and STRING are equivalent in different databases.</li>
  <li><b>Easy to port</b> because all the database dependant code are stored in 
    stub functions. You do not need to port the core logic of the classes.</li>
  <li><b>PHP4 session support</b>. See adodb-session.php.</li>
</ul>
<h2>Change Log<a name="Changes"></a></h2>
<p><b>0.95 13 Mar 2001</b></p>
<p>Added postgres7 database driver which supports LIMIT and other version 7 stuff in the future.</p>
<p>Added SelectLimit to ADOConnection to simulate PostgreSQL's "select * from table limit 10,3".
Added helper function GetArrayLimit() to ADORecordSet.</p>
<p>Fixed mysql metacolumns bug. Thanks to Freek Dijkstra (phpeverywhere@macfreek.com).</p>
<p>Also many PostgreSQL changes by Freek. He almost rewrote the whole PostgreSQL driver!</p>
<p>Added fix to input parameters in Execute for non-strings by Ron Wilson.</p>
<p>Added new metatype, X for TeXt. Formerly, metatype B for Blob also included
text fields. Now 'B' is for binary/image data. 'X' for textual data.</p>
<p>Fixed $this->GetArray() in GetRows().</p>
<p>Oracle and OCI8: 1st parameter is always blank -- now warns if it is filled.</p>
<p>Now <i>hasLimit</i> and <i>hasTop</i> added to indicate whether 
SELECT * FROM TABLE LIMIT 10 or SELECT TOP 10 * FROM TABLE are supported.</p>
<p><b>0.94 04 Feb 2001</b></p>
<p>Added ADORecordSet::GetRows() for compatibility with Microsoft ADO. Synonym for GetArray().</p>
<p>Added new metatype 'R' to represent autoincrement numbers.</p>
<p>Added ADORecordSet.FetchObject() to return a row as an object.</p>
<p>Finally got a Linux box to test PostgreSql. Many fixes.</p>
<p>Fixed copyright misspellings in 0.93.</p>
<p>Fixed mssql MetaColumns type bug.</p>
<p>Worked around odbc bug in PHP4 for sessions.</p>
<p>Fixed many documentation bugs (affected_rows, metadatabases, qstr).</p>
<p>Fixed MySQL timestamp format (removed comma).</p>
<p>Interbase driver did not call ibase_pconnect(). Fixed.</p>
<p><b>0.93 18 Jan 2001</b></p>
<p>Fixed GetMenu bug.</p>
<p>Simplified Interbase commit and rollback.</p>
<p>Default behaviour on closing a connection is now to rollback all active transactions.</p>
<p>Added field object handling for array recordset for future XML compatibility.</p>
<p>Added arr2html() to convert array to html table.</p>
<p><b>0.92 2 Jan 2001</b></p>
<p>Interbase Commit and Rollback should be working again.</p>
<p>Changed initialisation of ADORecordSet. This is internal and should not affect users. We
are doing this to support cached recordsets in the future.</p>
<p>Implemented ADORecordSet_array class. This allows you to simulate a database recordset
with an array.</p>
<p>Added UnixDate() and UnixTimeStamp() to ADORecordSet.</p>
<p><b>0.91 21 Dec 2000</b></p>
<p>Fixed ODBC so ErrorMsg() is working.</p>
<p>Worked around ADO unrecognised null (0x1) value problem in COM.</p>
<p>Added Sybase support for FetchField() type</p>
<p>Removed debugging code and unneeded html from various files</p>
<p>Changed to javadoc style comments to adodb.inc.php.</p>
<p>Added maxsql as synonym for mysqlt</p>
<p>Now ODBC downloads first 8K of blob by default</b>
<p><b>0.90 15 Nov 2000</b></p>
<p>Lots of testing of Microsoft ADO. Should be more stable now.</p>
<p>Added $ADODB_COUNTREC. Set to false for high speed selects.</p>
<p>Added Sybase support. Contributed by Toni Tunkkari (toni.tunkkari@finebyte.com). Bug in Sybase 
  API: GetFields is unable to determine date types.</p>
<p>Changed behaviour of RecordSet.GetMenu() to support size parameter (listbox) properly.</p>
<p>Added emptyDate and emptyTimeStamp to RecordSet class that defines how to represent 
  empty dates.</p>
<p>Added MetaColumns($table) that returns an array of ADODBFieldObject's listing 
  the columns of a table.</p>
<p>Added transaction support for PostgresSQL -- thanks to "Eric G. Werk" egw@netguide.dk.</p>
<p>Added adodb-session.php for session support.</p>
<p><b>0.80 30 Nov 2000</b></p>
<p>Added support for charSet for interbase. Implemented MetaTables for most databases. 
  PostgreSQL more extensively tested.</p>
<p><b>0.71 22 Nov 2000</b></p>
<p>Switched from using require_once to include/include_once for backward compatability with PHP 4.02 and earlier.</p>
<p><b>0.70 15 Nov 2000</b></p>
<p>Calls by reference have been removed (call_time_pass_reference=Off) to ensure compatibility with future versions of PHP, 
except in Oracle 7 driver due to a bug in php_oracle.dll.</p>
<p>PostgreSQL database driver contributed by Alberto Cerezal (acerezalp@dbnet.es). 
</p>
<p>Oci8 driver for Oracle 8 contributed by George Fourlanos (fou@infomap.gr).</p>
<p>Added <i>mysqlt</i> database driver to support MySQL 3.23 which has transaction 
 support. </p>
<p>Oracle default date format (DD-MON-YY) did not match ADODB default date format (which is YYYY-MM-DD). Use ALTER SESSION to force the default date.</p>
<p>Error message checking is now included in test suite.</p>
<p>MoveNext() did not check EOF properly -- fixed.</p>
<p><b>0.60 Nov 8 2000</b></p>
<p>Fixed some constructor bugs in ODBC and ADO. Added ErrorNo function to ADOConnection 
 class. </p>
<p><b>0.51 Oct 18 2000</b></p>
<p>Fixed some interbase bugs.</p>
<p><b>0.50 Oct 16 2000</b></p>
<p>Interbase commit/rollback changed to be compatible with PHP 4.03. </p>
<p>CommitTrans( ) will now return true if transactions not supported. </p>
<p>Conversely RollbackTrans( ) will return false if transactions not supported. 
</p>
<p><b>0.46 Oct 12</b></p>
Many Oracle compatibility issues fixed. 
<p><b>0.40 Sept 26</b></p>
<p>Many bug fixes</p>
<p>Now Code for BeginTrans, CommitTrans and RollbackTrans is working. So is the Affected_Rows
and Insert_ID. Added above functions to test.php.</p>
<p>ADO type handling was busted in 0.30. Fixed.</p>
<p>Generalised Move( ) so it works will all databases, including ODBC.</p>
<p><b>0.30 Sept 18</b></p>
<p>Renamed ADOLoadDB to ADOLoadCode. This is clearer.</p>
<p>Added BeginTrans, CommitTrans and RollbackTrans functions.</p>
<p>Added Affected_Rows() and Insert_ID(), _affectedrows() and _insertID(), ListTables(), 
 ListDatabases(), ListColumns().</p>
<p>Need to add New_ID() and hasInsertID and hasAffectedRows, autoCommit </p>
<p><b>0.20 Sept 12</b></p>
<p>Added support for Microsoft's ADO.</p>
<p>Added new field to ADORecordSet -- canSeek</p>
<p>Added new parameter to _fetch($ignore_fields = false). Setting to true will 
 not update fields array for faster performance.</p>
<p>Added new field to ADORecordSet/ADOConnection -- dataProvider to indicate whether 
 a class is derived from odbc or ado.</p>
<p>Changed class ODBCFieldObject to ADODBFieldObject -- not documented currently.</p>
<p>Added benchmark.php and testdatabases.inc.php to the test suite.</p>
<p>Added to ADORecordSet FastForward( ) for future high speed scrolling. Not documented.</p>
<p>Realised that ADO's Move( ) uses relative positioning. ADODB uses absolute. 
</p>
<p><b>0.10 Sept 9 2000</b></p>
<p>First release</p>
<h2>Feature Requests and Bug Reports<a name="bugs"></a></h2>
<p>Feature requests and bug reports can be emailed to <a href="mailto:jlim@natsoft.com.my">jlim@natsoft.com.my</a> 
 or posted to <a href="http://php.weblogs.com/discuss/msgReader$96">http://php.weblogs.com/discuss/msgReader$96</a>.</p>
<h2>Installation Guide<a name="install"></a></h2>
<p>Make sure you are running PHP4.01pl2 or later (it uses require_once and include_once). Unpack all the files into a directory accessible by your webserver. </p>
<p>Open the file adodb.inc.php. Modify the following line to the directory path 
 where all the files have been unpacked to.</p>
<p> &nbsp; &nbsp; &nbsp; $ADODB_DIR = "<b>d:/inetpub/wwwroot/php/adodb</b>"; 
</p>
<p>To test you will need a database. Open <i>testdatabases.inc.php</i> and modify 
 the connection parameters to suit your database. This script will create a new 
 table in the database and perform various tests.</p>
<p>That's it!</p>
<h3>Initialization Code<a name="coding"></a></h3>
<p>When running ADODB, at least two files are loaded. First is adodb.inc.php, 
 which contains all functions used by all database classes. The code specific 
 to a particular database is in the adodb-????.inc.php file.</p>
<p><a name=ADOLoadCode>In your PHP file put these two lines in</a> the beginning;</p>
<p><b>include('/path/to/set/here/adodb.inc.php');<br>
 </b><b>ADOLoadCode(&lt;database-driver-name&gt;);</b></p>
<p>ADOLoadCode loads the code for a specific <i>database driver</i>. You should 
 only call ADOLoadCode once for every database driver you need to access. Legal 
 database drivers: </p>
<table width="100%" border="1">
  <tr valign="top"> 
    <td><b>Name</b></td>
    <td><b>Database</b></td>
    <td><b><font size="2">RecordCount() usable</font></b></td>
    <td><b>Prerequisites</b></td>
    <td><b>Operating Systems</b></td>
  </tr>
  <tr valign="top"> 
    <td><b>access</b></td>
    <td>Microsoft Access.</td>
    <td>N</td>
    <td>ODBC </td>
    <td>Windows only</td>
  </tr>
  <tr valign="top"> 
    <td><b>ado</b></td>
    <td>Generic ADO, not tuned for specific databases. Slower than ODBC, but allows 
      DSN-less connections.</td>
    <td>? depends on database</td>
    <td>ADO and OLEDB provider</td>
    <td>Windows only</td>
  </tr>
  <tr valign="top"> 
    <td><b>ado_access</b></td>
    <td>Microsoft Access using ADO. Slower than ODBC, but allows DSN-less connections.</td>
    <td>N</td>
    <td>ADO and OLEDB provider for Access</td>
    <td>Windows only</td>
  </tr>
  <tr valign="top"> 
    <td><b>vfp</b></td>
    <td>Microsoft Visual FoxPro</td>
    <td>N</td>
    <td>ODBC</td>
    <td>Windows only</td>
  </tr>
  <tr valign="top"> 
    <td><b>ibase</b></td>
    <td>Interbase</td>
    <td>N</td>
    <td>Interbase client</td>
    <td>Unix and Windows</td>
  </tr>
  <tr valign="top"> 
    <td><b>mssql</b></td>
    <td> 
      <p>Microsoft SQL Server 7.</p>
    </td>
    <td>Y</td>
    <td>Mssql client</td>
    <td> 
      <p>Unix and Windows. <a href="http://phpbuilder.com/columns/alberto20000919.php3"><br>
        Unix install howto</a>.</p>
    </td>
  </tr>
  <tr valign="top"> 
    <td><b>mysql</b></td>
    <td>MySQL without transaction support (3.22)</td>
    <td>Y</td>
    <td>MySQL client</td>
    <td>Unix and Windows</td>
  </tr>
  <tr valign="top"> 
    <td><b>mysqlt</b> or <b>maxsql</b></td>
    <td>MySQL with transaction support (3.23)</td>
    <td>Y</td>
    <td>MySQL client</td>
    <td>Unix and Windows</td>
  </tr>
  <tr valign="top"> 
    <td><b>oci8</b></td>
    <td>Oracle 8. Has more functionality than <i>oracle</i> driver (Affected_Rows).</td>
    <td>N</td>
    <td>Oracle client</td>
    <td>Unix and Windows</td>
  </tr>
  <tr valign="top"> 
    <td><b>odbc</b></td>
    <td>Generic ODBC, not tuned for specific databases.</td>
    <td>? depends on database</td>
    <td>ODBC</td>
    <td>Unix and Windows. <a href="http://phpbuilder.com/columns/alberto20000919.php3?page=4">Unix 
      hints.</a></td>
  </tr>
  <tr valign="top"> 
    <td><b>oracle</b></td>
    <td>Oracle 7 or 8 support. Less functionality than oci8 driver.</td>
    <td>N</td>
    <td>Oracle client</td>
    <td>Unix and Windows</td>
  </tr>
  <tr valign="top"> 
    <td><b>postgres</b></td>
    <td>PostgreSQL which does not support LIMIT internally.</td>
    <td>Y</td>
    <td>PostgreSQL client</td>
    <td>Unix and Windows. </td>
  </tr>
   <tr valign="top"> 
    <td><b>postgres7</b></td>
    <td>PostgreSQL which supports LIMIT and other version 7 functionality.</td>
    <td>Y</td>
    <td>PostgreSQL client</td>
    <td>Unix and Windows. </td>
  </tr>
   <tr valign="top"> 
    <td><b>sybase</b></td>
    <td>Sybase. Warning: this is experimental. Please email me if there are problems.</td>
    <td>Y</td>
    <td>Sybase client</td>
    <td> 
      <p>Unix and Windows. <a href="http://www.finebyte.com/docs/sybase/ASA-PHP-Linux.html">Unix 
        hints</a>.</p>
    </td>
  </tr>
</table>
<p>RecordCount() usable indicates whether RecordCount() returns -1 instead of 
  the number of rows when a SELECT statement is executed. For highest performance, 
  disable RecordCount() by setting the global variable $ADODB_COUNTRECS=false. 
  For the reason why, see the notes to <a href="http://php.net/manual/function.sybase-num-rows.php">http://php.net/manual/function.sybase-num-rows.php</a></p>
<p>Other database drivers used for testing ADODB.</p>
<table width="100%" border="0">
 <tr valign="top"> 
  <td width="9%"><b>ado_mssql</b></td>
  <td width="88%">Microsoft SQL Server 7 using Microsoft ADO. This database driver 
   is only for test purposes. Use the mssql driver instead.</td>
 </tr>
 <tr valign="top"> 
  <td width="9%"><b>odbc_mssql</b></td>
  <td width="88%">Microsoft SQL Server 7 using ODBC. This database driver is only 
   for test purposes. Use the mssql driver instead.</td>
 </tr>
</table>
<p>Whenever you need to connect to a database, you create a Connection object 
 using the <b><a name=adonewconnection>ADONewConnection</a></b>( ) function. This 
 can only be called after ADOLoadCode( ) has been executed. ADONewConnection accepts 
 one optional parameter, the &lt;database-name-here&gt;. If no parameter is specified, 
 it will create a new ADOConnection for the last database loaded by ADOLoadCode( 
 ).</p>
<p>See the examples below in the Tutorial.</p>
<hr>
<h1>Tutorial<a name="quickstart"></a></h1>
<h3>Example 1: Select Statement<a name="ex1"></a></h3>
<p>Task: Connect to the Access Northwind database, display the first 2 columns 
  of each row.</p>
<p>In this example, we create a ADODBConnection object, which represents the connection 
 to the database. The connection is initiated with <a href="#pconnect"><font face="Courier New, Courier, mono">PConnect</font></a>, 
 which is a persistent connection. Whenever we want to query the database, we 
 call the <font face="Courier New, Courier, mono">ADODBConnection.<a href="#execute">Execute</a>()</font> 
 function. This returns an ADORecordSet object which is actually a cursor that 
 holds the current row in the array <font face="Courier New, Courier, mono">fields[]</font>. 
 We use <font face="Courier New, Courier, mono"><a href="#movenext">MoveNext</a>()</font> 
 to move from row to row.</p>
<p>NB: A useful function that is not used in this example is 
<font face="Courier New, Courier, mono"><a href="#selectlimit">SelectLimit</a></font>, which
allows us to limit the number of rows shown.
<pre>
&lt;?
<font face="Courier New, Courier, mono"><b>include</b>('adodb.inc.php');       // load code common to ADODB
ADOLoadCode('access');            // load Access code
$<font color="#660000">conn</font> = &amp;ADONewConnection();    // create a connection
$<font color="#660000">conn</font>->PConnect('northwind');   // connect to MS-Access, northwind db
$<font color="#660000">recordSet</font> = &amp;$<font color="#660000">conn</font>->Execute('select * from products');

<b>while</b> (!$<font color="#660000">recordSet</font>-&gt;EOF) &#123;
	<b>print</b> $<font color="#660000">recordSet</font>->fields[0].' '.$<font color="#660000">recordSet</font>->fields[1].'&lt;BR&gt;';
	$<font color="#660000">recordSet</font>-&gt;MoveNext();
&#125;

$<font color="#660000">recordSet</font>->Close(); // optional
$<font color="#660000">conn</font>->Close(); // optional
</font>
?>
</pre>
<p>The $<font face="Courier New, Courier, mono">recordSet</font> returned stores 
 the current row in the <font face="Courier New, Courier, mono">$recordSet-&gt;fields</font> 
 array, indexed by column number (starting from zero). We use the <font face="Courier New, Courier, mono"><a href="#movenext">MoveNext</a>()</font> 
 function to move to the next row. The <font face="Courier New, Courier, mono">EOF</font> 
 property is set to true when end-of-file is reached. </p>
<p>An associative array by column name is also provided by emulation; because 
 some database extensions do not provide associative arrays, we use a function 
 <font face="Courier New, Courier, mono">Fields()</font> to emulate an associative 
 array. For example to access the ProductID field value, we can use <font face="Courier New, Courier, mono">$recordSet-&gt;<a href="#fields">Fields</a>('productID'). 
 </font>Note that this is not an array, but a function. Column names for this 
 function are case-insensitive.</p>
<p>To get the number of rows in the select statement, you can use <font face="Courier New, Courier, mono">$recordSet-&gt;<a href="#recordcount">RecordCount</a>()</font>. 
 Note that it can return -1 if the number of rows returned cannot be determined.</p>
<h3>Example 2: Advanced Select with Field Objects<a name="ex2"></a></h3>
<p>Select a table, display the first two columns. If the second column is a date or timestamp, reformat the date to US format.</p>
<pre>
&lt;?
<font face="Courier New, Courier, mono"><b>include</b>('adodb.inc.php');       // load code common to ADODB
ADOLoadCode('access');            // load Access code
$<font color="#660000">conn</font> = &amp;ADONewConnection();    // create a connection
$<font color="#660000">conn</font>->PConnect('northwind');   // connect to MS-Access, northwind db
$<font color="#660000">recordSet</font> = &amp;$<font color="#660000">conn</font>->Execute('select CustomerID,OrderDate from Orders');

<b>while</b> (!$<font color="#660000">recordSet</font>-&gt;EOF) &#123;
	$<font color="#660000">fld</font> = <font color="#336600"><b>$</b><font color="#660000">recordSet</font><b>-&gt;FetchField</b></font><font color="#006600">(</font>1<font color="#006600">);</font>
	$<font color="#660000">type</font> = <font color="#336600"><b>$</b><font color="#660000">recordSet</font><b>-&gt;MetaType</b></font>($fld-&gt;type);

	<b>if</b> ( $<font color="#660000">type</font> == 'D' || $<font color="#660000">type</font> == 'T') 
		<b>print</b> $<font color="#660000">recordSet</font>-&gt;fields[0].' '.
			<b><font color="#336600">$</font></b><font color="#660000">recordSet</font><b><font color="#336600">-&gt;UserDate</font></b>($<font color="#660000">recordSet</font>-&gt;fields[1],'<b>m/d/Y</b>').'&lt;BR&gt;';
	<b>else </b>
		<b>print</b> $<font color="#660000">recordSet</font>->fields[0].' '.$<font color="#660000">recordSet</font>->fields[1].'&lt;BR&gt;';

	$<font color="#660000">recordSet</font>-&gt;MoveNext();
&#125;

$<font color="#660000">recordSet</font>->Close(); // optional
$<font color="#660000">conn</font>->Close(); // optional
</font>
?>
</pre>
<p>In this example, we check the field type of the second column using <font face="Courier New, Courier, mono"><a href="#fetchfield">FetchField</a>().</font> 
 This returns an object with at least 3 fields.</p>
<ul>
 <li><b>name</b>: name of column</li>
 <li> <b>type</b>: native field type of column</li>
 <li> <b>max_length</b>: maximum length of field. Some databases such as MySQL 
  do not return the maximum length of the field correctly. In these cases max_length 
  will be set to -1.</li>
</ul>
<p>We then use <font face="Courier New, Courier, mono"><a href="#metatype">MetaType</a>()</font> 
 to translate the native type to a <i>generic</i> type. Currently the following 
 <i>generic</i> types are defined:</p>
<ul>
 <li><b>C</b>: character fields that should be shown in a &lt;input type=&quot;text&quot;&gt; 
  tag.</li>
 <li><b>X</b>: TeXt, large text fields that should be shown in a &lt;textarea&gt;</li>
 <li><b>B</b>: Blobs, or Binary Large Objects. Typically images.
 <li><b>D</b>: Date field</li>
 <li><b>T</b>: Timestamp field</li>
 <li><b>L</b>: Logical field (boolean or bit-field)</li>
 <li><b>N</b>: Numeric field. Includes autoincrement, numeric, floating point, 
  real and integer. </li>
</ul>
<p>If the metatype is of type date or timestamp, then we print it using the user 
 defined date format with <font face="Courier New, Courier, mono"><a href="#userdate">UserDate</a>(),</font> 
 which converts the PHP SQL date string format to a user defined one. Another 
 use for <font face="Courier New, Courier, mono"><a href="#metatype">MetaType</a>()</font> 
 is data validation before doing an SQL insert or update.</p>
<h3>Example 3: Inserting<a name="ex3"></a></h3>
<p>Insert a row to the Orders table containing dates and strings that need to be quoted before they can be accepted by the database, eg: the single-quote in the word <i>John's</i>.</p>
<pre>
&lt;?
<b>include</b>('adodb.inc.php');       // load code common to ADODB
ADOLoadCode('access');            // load Access code
$<font color="#660000">conn</font> = &amp;ADONewConnection();    // create a connection
$<font color="#660000">conn</font>->PConnect('northwind');   // connect to MS-Access, northwind db

$<font color="#660000">shipto</font> = <font color="#006600"><b>$conn-&gt;qstr</b></font>(&quot;<i>John's Old Shoppe</i>&quot;);

$<font color="#660000">sql</font> = &quot;insert into orders (customerID,EmployeeID,OrderDate,$shipto) &quot;;
$<font color="#660000">sql</font> .= &quot;values ('ANATR',2,&quot;.<b><font color="#006600">$conn-&gt;DBDate(</font>time()<font color="#006600">)</font></b><font color="#006600">.</font>&quot;,$<font color="#660000">shipto</font>)&quot;;

<b>if</b> ($<font color="#660000">conn</font>->Execute($<font color="#660000">sql</font>) <font color="#336600"><b>=== false</b></font>) &#123;
	<b>print</b> 'error inserting: '.<font color="#336600"><b>$conn-&gt;ErrorMsg()</b></font>.'&lt;BR&gt;';
&#125;
?>
</pre>
<p>In this example, we see the advanced date and quote handling facilities of 
  ADODB. The unix timestamp (which is a long integer) is appropriately formated 
  for Access with <font face="Courier New, Courier, mono"><a href="#dbdate">DBDate</a>()</font>, 
  and the right escape character is used for quoting the <i>John's Old Shoppe</i>, 
  which is<b> </b><i>John'<b>'</b>s Old Shoppe</i> and not PHP's default <i>John\<b>'</b>s 
  Old Shoppe</i> with <font face="Courier New, Courier, mono"><a href="#qstr">qstr</a>()</font>. 
</p>
<p>Observe the error-handling of the Execute statement. False is returned by<font face="Courier New, Courier, mono"> 
 <a href="#execute">Execute</a>() </font>if an error occured. The error message 
 for the last error that occurred is displayed in <font face="Courier New, Courier, mono"><a href="#errormsg">ErrorMsg</a>()</font>. 
 Note: <i>php_track_errors</i> might have to be enabled for error messages to 
 be saved.</p>
<h3> Example 4: Debugging<a name="ex4"></a></h3>
<pre>&lt;?

<b>include</b>('adodb.inc.php');       // load code common to ADODB
ADOLoadCode('access');            // load Access code
$<font color="#663300">conn</font> = &amp;ADONewConnection();    // create a connection
$<font color="#663300">conn</font>->PConnect('northwind');   // connect to MS-Access, northwind db
<font color="#000000">$<font color="#663300">shipto</font> = <b>$conn-&gt;qstr</b>(&quot;John's Old Shoppe&quot;);
$<font color="#663300">sql</font> = &quot;insert into orders (customerID,EmployeeID,OrderDate,ShipName) &quot;;
$<font color="#663300">sql</font> .= &quot;values ('ANATR',2,&quot;.$<font color="#663300">conn</font>-&gt;FormatDate(time()).&quot;,$shipto)&quot;;
<b><font color="#336600">$<font color="#663300">conn</font>-&gt;debug = true;</font></b>
<b>if</b> ($<font color="#663300">conn</font>->Execute($sql) <b>=== false</b>) <b>print</b> 'error inserting';</font>

?&gt;
</pre>
<p>In the above example, we have turned on debugging by setting <b>debug = true</b>. 
 This will display the SQL statement before execution, and also show any error 
 messages. There is no need to call <font face="Courier New, Courier, mono"><a href="#errormsg">ErrorMsg</a>()</font> 
 in this case. For displaying the recordset, see the <font face="Courier New, Courier, mono"><a href="#exrs2html">rs2html</a>() 
 </font>example.</p>
<h3>Example 5: MySQL and Menus<a name="ex5"></a></h3>
<p>Connect to MySQL database <i>agora</i>, and generate a &lt;select&gt; menu 
 from an SQL statement where the &lt;option&gt; captions are in the 1st column, 
 and the value to send back to the server is in the 2nd column.</p>
<pre>&lt;?
<b>include</b>('adodb.inc.php'); // load code common to ADODB
ADOLoadCode('mysql');           // load MySQL code
$<font color="#663300">conn</font> = &amp;ADONewConnection();  // create a connection
$<font color="#663300">conn</font>->PConnect('localhost','userid','','agora');// connect to MySQL, agora db
<font color="#000000">$<font color="#663300">sql</font> = 'select CustomerName, CustomerID from customers';
$<font color="#663300">rs</font> = $<font color="#663300">conn</font>->Execute($sql);
<b>print</b> <b><font color="#336600">$<font color="#663300">rs</font>-&gt;GetMenu('GetCust','Mary Rosli');
?&gt;</font></b></font></pre>
<p>Here we define a menu named GetCust, with the menu option 'Mary Rosli' selected. 
 See <a href="#getmenu"><font face="Courier New, Courier, mono">GetMenu</font></a><font face="Courier New, Courier, mono">()</font>. 
 We also have functions that return the recordset as an array: <font face="Courier New, Courier, mono"><a href="#getarray">GetArray</a>()</font>, 
 and as an associative array with the key being the first column: <a href="#getassoc">GetAssoc</a>().</p>
<h3>Example 6: Connecting to 2 Databases At Once<a name="ex6"></a></h3>
<pre>&lt;?
<b>include</b>('adodb.inc.php');     // load code common to ADODB
ADOLoadCode('mysql');         // load MySQL code
ADOLoadCode('oracle');         // load oracle code
$<font color="#663300">conn1</font> = &amp;ADONewConnection('mysql');  // create a mysql connection
$<font color="#663300">conn2</font> = &amp;ADONewConnection('oracle');  // create a oracle connection

$conn1-&gt;Execute('insert ...');
$conn2-&gt;Execute('update ...');
?&gt;</pre>
<hr>
<h1>Class Reference<a name="Ref"></a></h1>
<p>Function parameters with [ ] around them are optional.</p>
<h2>ADOConnection<a name="ADOConnection"></a></h2>
<p>Object that performs the connection to the database, executes SQL statements 
 and has a set of utility functions for standardising the format of SQL statements 
 for issues such as concatenation and date formats.</p>
<hr>
<h3>ADOConnection Fields</h3>
<p><b>databaseType</b>: Name of the database system we are connecting to. Eg. 
 <b>odbc</b> or <b>mssql</b> or <b>mysql</b>.</p>
<p><b>dataProvider</b>: The underlying mechanism used to connect to the database. 
 Normally set to <b>native</b>, unless using <b>odbc</b> or <b>ado</b>.</p>
<p><b>host: </b>Name of server or data source name (DSN) to connect to.</p>
<p><b>database</b>: Name of the database or to connect to. If ado is used, it 
 will hold the ado data provider.</p>
<p><b>user</b>: Login id to connect to database. Password is not saved for security 
 reasons.</p>
<p><b>debug</b>: Set to <i>true</i> to make debug statements to appear.</p>
<p><b>concat_operator</b>: Set to '+' or '||' normally. The operator used to concatenate 
 strings in SQL. Used by the <b><a href="#concat">Concat</a></b> function.</p>
<p><b>fmtDate</b>: The format used by the <b><a href="#dbdate">DBDate</a></b> 
 function to send dates to the database. is '#Y-m-d#' for Microsoft Access, and 
 '\'Y-m-d\'' for MySQL.</p>
<p><b>fmtTimeStamp: </b>The format used by the <b><a href="#dbtimestamp">DBTimeStamp</a></b> 
 function to send timestamps to the database. </p>
<p><b>true</b>: The value used to represent true.Eg. '.T.'. for Foxpro, '1' for 
 Microsoft SQL.</p>
<p><b>false: </b> The value used to represent false. Eg. '.F.'. for Foxpro, '0' 
 for Microsoft SQL.</p>
<p><b>replaceQuote</b>: The string used to escape quotes. Eg. double single-quotes 
 for Microsoft SQL, and backslash-quote for MySQL. Used by <a href="#qstr">qstr</a>.</p>
<p><b>autoCommit</b>: indicates whether automatic commit is enabled. Default is 
  true.</p>
<p><b>charSet</b>: set the default charset to use. Currently only interbase supports 
  this. </p>
<p><b>metaTablesSQL</b>: SQL statement to return a list of available tables. Eg. 
  <i>SHOW TABLES</i> in MySQL.</p>
<hr>
<h3>ADOConnection Main Functions</h3>
<p><b>ADOConnection( )</b></p>
<p>Constructor function. Do not call this directly. Use ADONewConnection( ) instead.</p>
<p><b>Connect<a name="Connect"></a>($host,[$user],[$password],[$database])</b></p>
<p>Non-persistent connect to data source or server $<b>host</b>, using userid 
 $<b>user </b>and password $<b>password</b>. If the server supports multiple databases, 
 connect to database $<b>database</b>. </p>
<p>ADO Note: If you are using a Microsoft ADO and not OLEDB, you can set the $database 
 parameter to the OLEDB data provider you are using.</p>
 <p>PostgreSQL: Pass the connection string in the first parameter $host. The other parameters 
 are ignored.</p>
<p>Returns true/false depending on connection.</p>
<p><b>PConnect<a name="PConnect"></a>($host,[$user],[$password],[$database])</b></p>
<p>Persistent connect to data source or server $<b>host</b>, using userid $<b>user</b> 
 and password $<b>password</b>. If the server supports multiple databases, connect 
 to database $<b>database</b>.</p>
 <p>PostgreSQL and ADO: refer to notes to Connect function above.</p>
 <p>Returns true/false depending on connection.</p>
<p><b>Execute<a name="Execute"></a>($sql)</b></p>
<p>Execute SQL statement $<b>sql</b> and return derived class of ADORecordSet 
 if successful. Note that a record set is always returned, even if we are executing 
 an insert or update statement.</p>
<p>Returns derived class of ADORecordSet. Eg. if connecting via mysql, then ADORecordSet_mysql 
 would be returned.False is returned if there was an error in executing the sql.</p>
 <p><b>SelectLimit<a name="SelectLimit"></a>($sql,$numrows=-1,$offset=-1)</b></p>
 <p>Returns a recordset if successful. Returns false otherwise.
  Performs a select statement, simulating PostgreSQL's SELECT statement, LIMIT $numrows OFFSET $offset clause.</p>
 <p>In PostgreSQL, SELECT * FROM TABLE LIMIT 3 will return the first 3 records only. The equivalent
 is <code>$connection->SelectLimit('SELECT * FROM TABLE',3)</code>. This functionality is simulated
 for databases that do not possess this feature.</p>
  <p>And SELECT * FROM TABLE LIMIT 3 OFFSET 2 will return records 3, 4 and 5 (eg. after record 2, return 3 rows).
   The equivalent in ADODB is <code>$connection->SelectLimit('SELECT * FROM TABLE',3,2)</code>.</p>
   <p>Note that this is the <i>opposite</i> of MySQL's LIMIT clause. You can also set 
   <code>$connection->SelectLimit('SELECT * FROM TABLE',-1,10)</code> to get rows 11 to the last row.</p>
<p><b>ErrorMsg<a name="ErrorMsg"></a>()</b></p>
<p>Returns the last status or error message. This can return a string even if no error occurs. 
Use ErrorNo to check if an error has occurred.</p>
<p>Note: If <b>debug</b> is enabled, the SQL error message is always displayed 
 when the <b>Execute</b> function is called.</p>
<p><b>ErrorNo<a name="errorno"></a>()</b></p>
<p>Returns the last error number. Note that this is not supported by some databases 
 such as ODBC, and in this case returns 0.</p>
<p><b>Close<a name="Close"></a>( )</b></p>
<p>Close the database connection. PHP4 proudly states that we no longer have to 
 clean up at the end of the connection because the reference counting mechanism 
 of PHP4 will automatically clean up for us.</p>
<p><b>BeginTrans<a name="Begintrans"></a>( )</b></p>
<p>Begin a transaction. Turns off autoCommit. Returns true if successful. Some 
 databases will always return false if transaction support is not available. 
 Interbase, Oracle and MSSQL support transactions. Note that transaction support
 is not available for Microsoft ADO due to some bugs in PHP 4.02. 
 Use the native transaction support of your RDBMS. Any open transactions will be rolled back when the connection is closed.</p>
<p><b>CommitTrans<a name="CommitTrans"></a>( )</b></p>
<p>End a transaction successfully. Returns true if successful. If the database does not
support transactions, will return true also as data is always committed. </p>
<p><b>RollbackTrans<a name="RollbackTrans"></a>( )</b></p>
<p>End a transaction, rollback all changes. Returns true if successful. If the database
does not support transactions, will return false as data is never rollbacked. </p>
<hr>
<h3>ADOConnection Utility Functions</h3>
<p><b>BlankRecordSet<a name="blankrecordset"></a>([$queryid])</b></p>
<p>Returns an empty recordset. This is useful if you require the use of some ADORecordSet 
  utility function such as UnixDate.</p>
<p><b>Concat<a name="Concat"></a>($s1,$s2,....)</b></p>
<p>Generates the sql string used to concatenate $s1, $s2, etc together. Uses the 
 string in the concat_operator field to generate the concatenation. Override this 
 function if a concatenation operator is not used, eg. MySQL.</p>
<p>Returns the concatenated string.</p>
<p><b>DBDate<a name="DBDate"></a>($date)</b></p>
<p>Format the $<b>date</b> in the format the database accepts. Uses the fmtDate 
 field, which holds the format to use..</p>
<p>Returns the date as a string.</p>
<p><b>DBTimeStamp<a name="DBTimeStamp"></a>($ts)</b></p>
<p>Format the timestamp $<b>ts</b> in the format the database accepts. Uses the 
 fmtTimeStamp field, which holds the format to use..</p>
<p>Returns the timestamp as a string.</p>
<p><b>qstr<a name="qstr"></a>($s,[$magic_quotes_enabled</b>=false]<b>)</b></p>
<p>Quotes a string to be sent to the database. The $<b>magic_quotes_enabled</b> 
  parameter may look funny, but the idea is if you are quoting a string extracted 
  from a POST/GET variable, then pass get_magic_quotes_gpc() as the second parameter. 
  This will ensure that the variable is not quoted twice, once by <i>qstr</i> 
  and once by the <i>magic_quotes_gpc</i>.</p>
<p>Eg.<font face="Courier New, Courier, mono"> $s = $db-&gt;qstr(HTTP_GET_VARS['name'],get_magic_quotes_gpc());</font></p>
<p>Returns the quoted string.</p>
<p><b>Affected_Rows<a name="Affected_Rows"></a>( )</b></p>
<p>Returns the number of rows affected by a update or delete statement. Returns 
 false if function not supported.</p>
<p>Only supported for MySQL, MSSQL and ODBC currently. This function might only 
 give accurate results if you perform it in a transaction if you are using persistent 
 connections. This is because the connection you are assigned for one Execute(&nbsp;) 
 might differ from the next Execute(&nbsp;).</p>
<p><b>Insert_ID<a name="Inserted_ID"></a>( )</b></p>
<p>Returns the last autonumbering ID inserted. Returns false if function not supported. 
</p>
<p>Only supported for PostgreSQL, MySQL and MSSQL currently. PostgreSQL returns 
  the OID, which can change on a database reload. This function might only give 
  accurate results if you perform it in a transaction if you are using persistent 
  connections. This is because the connection you are assigned for one Execute(&nbsp;) 
  might differ from the next Execute(&nbsp;).</p>
<p><b>MetaDatabases<a name="metadatabases"></a>()</b></p>
<p>Returns a list of databases available on the server as an array. You have to 
  connect to the server first. Only available for ODBC, MySQL and ADO.</p>
<p><b>MetaTables<a name="metatables"></a>()</b></p>
<p>Returns an array of tables and views for the current database as an array. 
  The array should exclude system catalog tables if possible.</p>
<p><b>MetaColumns<a name="metacolumns"></a>($table)</b></p>
<p>Returns an array of ADODBFieldObject's, one field object for every column of 
  $table. Currently Sybase does not recognise date types, and ADO cannot identify 
  the correct data type (so we default to varchar).. </p>
<hr>
<h2>ADORecordSet<a name="ADORecordSet"></a></h2>
<p>When an SQL statement successfully is executed by <font face="Courier New, Courier, mono">ADOConnection-&gt;Execute($sql),</font>an 
 ADORecordSet object is returned. This object contains a virtual cursor so we 
 can move from row to row, functions to obtain information about the columns and 
 column types, and helper functions to deal with formating the results to show 
 to the user.</p>
<h3>ADORecordSet Fields</h3>
<p><b>fields: </b>Array containing the current row. This is not associative, but 
 is an indexed array from 0 to columns-1. See also the function <b><a href="#fields">Fields</a></b>, 
 which behaves like an associative array.</p>
<p><b>dataProvider</b>: The underlying mechanism used to connect to the database. 
 Normally set to <b>native</b>, unless using <b>odbc</b> or <b>ado</b>.</p>
<p><b>blobSize</b>: Maximum size of a char, string or varchar object before it 
 is treated as a Blob (Blob's should be shown with textarea's). See the <a href="#metatype">MetaType</a> 
 function.</p>
<p><b>sql</b>: Holds the sql statement used to generate this record set.</p>
<p><b>canSeek</b>: Set to true if Move( ) function works.</p>
<p><b>EOF</b>: True if we have scrolled the cursor past the last record.</p>
<h3>ADORecordSet Functions</h3>
<p><b>ADORecordSet( )</b></p>
<p>Constructer. Normally you never call this function yourself.</p>
<p><b>GetAssoc<a name="GetAssoc"></a>([$force_array])</b></p>
<p>Generates an associative array from the recordset if the number of columns 
 is greater than 2. The array is generated from the current cursor position till 
 EOF. The first column of the recordset becomes the key to the rest of the array. 
 If the columns is equal to two, then the key directly maps to the value unless 
 $force_array is set to true, when an array is created for each key. Inspired 
 by PEAR's getAssoc.</p>
<p>Example:</p>
<p>We have the following data in a recordset:</p>
<p>row1: Apple, Fruit, Edible<br>
 row2: Cactus, Plant, Inedible<br>
 row3: Rose, Flower, Edible</p>
<p>GetAssociation will generate the following associative array:</p>
<p>Apple =&gt; [Fruit, Edible]<br>
 Cactus =&gt; [Plant, Inedible]<br>
 Rose =&gt; [Flower,Edible]</p>
<p>Returns:</p>
<p>The associative array, or false if an error occurs.</p>
<p><b>GetArray<a name="GetArray"></a>([$number_of_rows])</b></p>
<p>Generate an array from the current cursor position, indexed from 0 to $number_of_rows 
 - 1. If $number_of_rows is undefined, till EOF.</p>
 <p><b>GetRows<a name="GetRows"></a>([$number_of_rows])</b></p>
 <p>Synonym for GetArray() for compatibility with Microsoft ADO.</p>
 
<p> <b>GetMenu<a name="GetMenu"></a>($name,[$default_str=''],[$blank1stItem=true],[$multiple_select=false],[$size=0],[$moreAttr=''])</b></p>
<p>Generate a HTML menu (&lt;select&gt;&lt;option&gt;&lt;option&gt;&lt;/select&gt;). 
 The first column of the recordset (fields[0]) will hold the string to display 
 in the option tags. If the recordset has more than 1 column, the second column 
 is the value to send back to the web server.. The menu will be given the name 
 $<b>name</b>. If $<b>default_str</b> is defined, then if $<b>default_str</b> 
 == fields[0], that field is selected. If $<b>blank1stItem</b> is true, the first 
 option is empty.</p>
 <p>To get a listbox, set the $<b>size</b> to a non-zero value. 
 If $<b>multiple_select</b> is true then a 
 listbox will be generated  with  $<b>size</b> items (or if $size==0, then 5 items) visible, 
 and we will return an array to a server. Lastly use $<b>moreAttr
 </b> to add additional attributes such as javascript or styles. </p>
<p>Example: GetMenu('menu1','A',true) will generate a menu: 
 <select name='menu1'>
  <option>
  <option value=1 selected>A
  <option value=2>B
 </select>
 for the data (A,1), (B,1). Also see <a href="#ex5">example 5</a>.</p>
<p><b>UserDate<a name="UserDate"></a>($str, [$fmt])</b></p>
<p>Converts the date string $<b>str</b> to another format.UserDate calls UnixDate 
  to parse $<b>str</b>, and $<b>fmt</b> defaults to Y-m-d if not defined.</p>
<p><b>UserTimeStamp<a name="UserTimeStamp"></a>($str, [$fmt])</b></p>
<p>Converts the timestamp string $<b>str</b> to another format. UserTimeStamp 
  calls UnixTimeStamp to parse $<b>str</b>, and $<b>fmt</b> defaults to Y-m-d 
  H:i:s if not defined.</p>
<p><b>UnixDate<a name="unixdate"></a>($str)</b></p>
<p>Parses the date string $<b>str</b> and returns it in unix mktime format (eg. 
  a number indicating the seconds after January 1st, 1970). Expects the date to 
  be in Y-m-d h:i:s format, except for Sybase and Microsoft SQL Server, where 
  M d Y is also accepted (the 3 letter month strings are controlled by a global 
  array, which might need localisation).</p>
<p><b>UnixTimeStamp<a name="unixtimestamp"></a>($str)</b></p>
<p>Parses the timestamp string $<b>str</b> and returns it in unix mktime format 
  (eg. a number indicating the seconds after January 1st, 1970). Expects the date 
  to be in Y-m-d H:i:s format, except for Sybase and Microsoft SQL Server, where 
  M d Y h:i:sA is also accepted (the 3 letter month strings are controlled by 
  a global array, which might need localisation)..</p>
<p><b>MoveNext<a name="MoveNext"></a>( )</b></p>
<p>Move the internal cursor to the next row. The <b>fields</b> array is automatically 
 updated. Return false if unable to do so, otherwise true.. </p>
<p><b>Move<a name="Move"></a>($to)</b></p>
<p>Moves the internal cursor to a specific row $<b>to</b>. Rows are zero-based 
  eg. 0 is the first row. The <b>fields</b> array is automatically updated. For 
  databases that do not support scrolling internally, ADODB will simulate forward 
  scrolling. Some databases do not support backward scrolling. If the $<b>to</b> 
  position is after the EOF, $<b>to</b> will move to the end of the RecordSet 
  for most databases. Some obscure databases using odbc might not behave this 
  way.</p>
<p>Note: This function uses <i>absolute positioning</i>, unlike Microsoft's ADO.</p>
<p>Returns true or false. If false, the internal cursor is not moved in most implementations, 
 so AbsolutePosition( ) will return the last cursor position before the Move( 
 ). </p>
<p><b>MoveFirst<a name="MoveFirst"></a>()</b></p>
<p>Internally calls Move(0). Note that some databases do not support this function.</p>
<p><b>MoveLast<a name="MoveLast"></a>()</b></p>
<p>Internally calls Move(RecordCount()-1). Note that some databases do not support 
 this function.</p>
<p><b>Fields</b><a name="fields"></a>(<b>$colname</b>)</p>
<p>Returns the value of the associated column $<b>colname</b> for the current 
 row. The column name is case-insensitive.</p>
<p><b>FetchField<a name="FetchField"></a>($column_number)</b></p>
<p>Returns an object containing the <b>name</b>, <b>type</b> and <b>max_length</b> 
 of the associated field. If the max_length cannot be determined reliably, it 
 will be set to -1. See <a href="#ex2">example 2.</a></p>
<p><b>FieldCount<a name="FieldCount"></a>( )</b></p>
<p>Returns the number of fields (columns) in the record set.</p>
<p><b>RecordCount<a name="RecordCount"></a>( )</b></p>
<p>Returns the number of rows in the record set. Note that some databases do not 
 support this, and will return -1. RowCount is a synonym for RecordCount.</p>
<p>The following databases are known to return -1. Oci8, Oracle, Interbase.</p>
<p><b>CurrentRow<a name="CurrentRow"></a>( )</b></p>
<p>Returns the current row of the record set. 0 is the first row.</p>
<p><b>AbsolutePosition<a name="abspos"></a>( )</b></p>
<p>Synonym for <b>CurrentRow</b> for compatibility with ADO. Returns the current 
 row of the record set. 0 is the first row.</p>
<p><b>MetaType<a name="MetaType"></a>($nativeDBType[,$field_max_length],[$fieldobj])</b></p>
<p>Determine what <i>generic</i> meta type a database field type is given its 
 native type $<b>nativeDBType</b> and the length of the field $<b>field_max_length</b>. 
 Note that field_max_length can be -1 if it is not known. The field object returned by the database driver can be passed in $<b>fieldobj</b>. This is useful for 
 databases such as <i>mysql</i> which has additional properties in the field object such as <i>primary_key</i>.</p>
 <p>Uses the field <b>blobSize</b> and compares 
 it with $<b>field_max_length</b> to determine whether the character field is 
 actually a blob.</p>
<p>Returns:</p>
<ul>
 <li><b>C</b>: Character fields that should be shown in a &lt;input type=&quot;text&quot;&gt; 
  tag. </li>
 <li><b>B</b>: Blob, or large text fields that should be shown in a &lt;textarea&gt;</li>
 <li><b>D</b>: Date field</li>
 <li><b>T</b>: Timestamp field</li>
 <li><b>L</b>: Logical field (boolean or bit-field)</li>
 <li><b>N</b>: Numeric field. Includes decimal, numeric, floating point, and real. </li>
   <li><b>I</b>: Integer field. </li>
   <li><b>R</b>: Counter or Autoincrement field. Must be numeric.</li>
</ul>
<p><b>Close( )<a name="rsclose"></a></b></p>
<p>Close the recordset.</p>
<hr>
<h3>function rs2html<a name="rs2html"></a>($adorecordset,[$tableheader_attributes], 
 [$col_titles])</h3>
<p>This is a standalone function (rs2html = recordset to html) that is similar 
 to PHP's <i>odbc_result_all</i> function, it prints a ADORecordSet, $<b>adorecordset</b> 
 as a HTML table. $<b>tableheader_attributes</b> allow you to control the table 
 <i>cellpadding</i>, <i>cellspacing</i> and <i>border</i> attributes. Lastly you 
 can replace the database column names with your own column titles with the array 
 $<b>col_titles</b>. This is designed more as a quick debugging mechanism, not 
 a production table recordset viewer.</p>
<p>You will need to include the file <i>tohtml.inc.php</i>.</p>
<p>Example of rs2html:<b><font color="#336600"><a name="exrs2html"></a></font></b></p>
<pre><b><font color="#336600">&lt;?
include('tohtml.inc.php')</font></b>; // load code common to ADODB 
<b>include</b>('adodb.inc.php'); // load code common to ADODB 
ADOLoadCode('mysql');   // load MySQL code 
$<font color="#663300">conn</font> = &amp;ADONewConnection();   // create a connection 
$<font color="#663300">conn</font>->PConnect('localhost','userid','','agora');// connect to MySQL, agora db
<font color="#000000">$<font color="#663300">sql</font> = 'select CustomerName, CustomerID from customers'; 
$<font color="#663300">rs</font>   = $<font color="#663300">conn</font>->Execute($sql); 
<font color="#336600"><b>rs2html</b></font><b>($<font color="#663300">rs</font>,'<i>border=2 cellpadding=3</i>',array('<i>Customer Name','Customer ID</i>'));
?&gt;</b></font></pre>
<hr>
<h3>Differences Between this ADODB library and Microsoft ADO<a name="adodiff"></a></h3>
<ol>
  <li>ADODB only supports recordsets created by a connection object. Recordsets 
    cannot be created independently.</li>
  <li>ADO properties are implemented as functions in ADODB. This makes it easier 
    to implement any enhanced ADO functionality in the future.</li>
  <li>ADODB's <font face="Courier New, Courier, mono">ADORecordSet-&gt;Move()</font> 
    uses absolute positioning, not relative. Bookmarks are not supported.</li>
  <li><font face="Courier New, Courier, mono">ADORecordSet-&gt;AbsolutePosition() 
    </font>cannot be used to move the record cursor.</li>
  <li>ADO Parameter objects are not supported.</li>
  <li>Recordset properties for paging records are not supported.</li>
</ol>
<hr>
<h1>Database Driver Guide<a name="DriverGuide"></a></h1>
<p>This describes how to create a class to connect to a new database. To ensure 
 there is no duplication of work, kindly email me at jlim@natsoft.com.my if you 
 decide to create such a class.</p>
<p>First decide on a name in lower case to call the database type. Let's say we 
 call it xbase. </p>
<p>Then we need to create two classes ADOConnection_xbase and ADORecordSet_xbase 
 in the file adodb-xbase.inc.php.</p>
<p>The simplest form of database driver is an adaptation of an existing ODBC driver. 
 Then we just need to create the class <i>ADOConnection_xbase extends ADOConnection_odbc</i> 
 to support the new <b>date</b> and <b>timestamp</b> formats, the <b>concatenation</b> 
 operator used, <b>true</b> and <b>false</b>. For the<i> ADORecordSet_xbase extends 
 ADORecordSet_odbc </i>we need to change the <b>MetaType</b> function. See<b> 
 adodb-vfp.inc.php</b> as an example.</p>
<p>More complicated is a totally new database driver that connects to a new PHP 
 extension. Then you will need to implement several functions. Fortunately, you 
 do not have to modify most of the complex code. You only need to override a few 
 stub functions. See <b>adodb-mysql.inc.php</b> for example.</p>
 <p>The default date format of ADODB internally is YYYY-MM-DD (Ansi-92). All dates
 should be converted to that format when passing to an ADODB date function. See Oracle
 for an example how we use ALTER SESSION to change the default date format in _pconnect
 _connect.</p>
<p><b>ADOConnection Functions to Override</b></p>
<p>Defining a constructor for your ADOConnection derived function is optional. 
 There is no need to call the base class constructor.</p>
<p>_<b>connect</b>: Low level implementation of Connect. Returns true or false. 
 Should set the _<b>connectionID</b>.</p>
<p>_<b>pconnect:</b> Low level implemention of PConnect. Returns true or false. 
 Should set the _<b>connectionID</b>.</p>
<p>_<b>query</b>: Execute a query. Returns the queryID, or false.</p>
<p>_<b>close: </b>Close the connection -- PHP should clean up all recordsets. 
</p>
<p><b>ErrorMsg</b>: Stores the error message in the private variable _errorMsg. 
</p>
<p>The ADOConnection functions BeginTrans( ), CommitTrans( ), RollbackTrans( ) are reserved for future expansion.</p>
<p><b>ADOConnection Fields to Set</b></p>
<p>_<b>bindInputArray</b>: Set to true if binding of parameters for SQL inserts 
 and updates is allowed using ?, eg. as with ODBC.</p>
<p><b>fmtDate</b></p>
<p><b>fmtTimeStamp</b></p>
<p><b>true</b></p>
<p><b>false</b></p>
<p><b>concat_operator</b></p>
<p><b>replaceQuote</b></p>
<p><b>hasLimit</b>  support SELECT * FROM TABLE LIMIT 10 of MySQL.</p>
<p><b>hasTop</b> support Microsoft style SELECT TOP 10 * FROM TABLE.</p>
<p><b>ADORecordSet Functions to Override</b></p>
<p>You will need to define a constructor for your ADORecordSet derived class that 
 calls the parent class constructor.</p>
<p><b>FetchField: </b> as documented above in ADORecordSet</p>
<p>_<b>initrs</b>: low level initialization of the recordset: setup the _<b>numOfRows</b> 
 and _<b>numOfFields</b> fields -- called by the constructor.</p>
<p>_<b>seek</b>: seek to a particular row. Do not load the data into the fields 
 array. This is done by _fetch. Returns true or false. Note that some implementations 
 such as Interbase do not support seek. Set canSeek to false.</p>
<p>_<b>fetch</b>: fetch a row using the database extension function and then move 
 to the next row. Sets the <b>fields</b> array. If the parameter $ignore_fields 
 is true then there is no need to populate the <b>fields</b> array, just move 
 to the next row. then Returns true or false.</p>
<p>_<b>close</b>: close the recordset</p>
<p><b>Fields</b>: If the array row returned by the PHP extension is not an associative 
 one, you will have to override this. See adodb-odbc.inc.php for an example. For 
 databases such as MySQL and MSSQL where an associative array is returned, there 
 is no need to override this function.</p>
<p><b>ADOConnection Fields to Set</b></p>
<p>canSeek: Set to true if the _seek function works.</p>

<h2>ToDo:</h2>
<p>See the <a href=http://php.weblogs.com/adodb-todo-roadmap>RoadMap</a> article.</p>
 
</body>
</html>
